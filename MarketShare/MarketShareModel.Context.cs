//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketShare
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarketShareEntities : DbContext
    {
        public MarketShareEntities()
            : base("name=MarketShareEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CategoryView> CategoryViews { get; set; }
        public virtual DbSet<ModelViewAgeDistribution> ModelViewAgeDistributions { get; set; }
        public virtual DbSet<ModelViewGlobal> ModelViewGlobals { get; set; }
        public virtual DbSet<PartsPotentialCategory> PartsPotentialCategories { get; set; }
        public virtual DbSet<PartsPotentialStandardCategory> PartsPotentialStandardCategories { get; set; }
        public virtual DbSet<PartsPotentialVIOCoverageAge> PartsPotentialVIOCoverageAges { get; set; }
        public virtual DbSet<PartsPotentialVIOCoverageAgeGlobal> PartsPotentialVIOCoverageAgeGlobals { get; set; }
        public virtual DbSet<PartsPotentialVIOCoverageBrand> PartsPotentialVIOCoverageBrands { get; set; }
        public virtual DbSet<PartsPotentialVIOCoverageBrandGlobal> PartsPotentialVIOCoverageBrandGlobals { get; set; }
        public virtual DbSet<t_IntelligenceViewData> t_IntelligenceViewData { get; set; }
        public virtual DbSet<PartNumberView> PartNumberViews { get; set; }
        public virtual DbSet<ModelViewPartNumber> ModelViewPartNumbers { get; set; }
        public virtual DbSet<PartsPotentialDashboard> PartsPotentialDashboards { get; set; }
        public virtual DbSet<DistributorPriceAggregation> DistributorPriceAggregations { get; set; }
        public virtual DbSet<ReferenceData> ReferenceDatas { get; set; }
        public virtual DbSet<DistributorPrice> DistributorPrices { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<WHIAppConfig> WHIAppConfigs { get; set; }
    
        public virtual int InsertGenerator(string schemaName, string tableName, Nullable<bool> includePrimaryKeyIdentity, Nullable<bool> includeNonPrimaryKeyIdentity, Nullable<bool> includeIfNotExists)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("schemaName", schemaName) :
                new ObjectParameter("schemaName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var includePrimaryKeyIdentityParameter = includePrimaryKeyIdentity.HasValue ?
                new ObjectParameter("IncludePrimaryKeyIdentity", includePrimaryKeyIdentity) :
                new ObjectParameter("IncludePrimaryKeyIdentity", typeof(bool));
    
            var includeNonPrimaryKeyIdentityParameter = includeNonPrimaryKeyIdentity.HasValue ?
                new ObjectParameter("IncludeNonPrimaryKeyIdentity", includeNonPrimaryKeyIdentity) :
                new ObjectParameter("IncludeNonPrimaryKeyIdentity", typeof(bool));
    
            var includeIfNotExistsParameter = includeIfNotExists.HasValue ?
                new ObjectParameter("IncludeIfNotExists", includeIfNotExists) :
                new ObjectParameter("IncludeIfNotExists", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenerator", schemaNameParameter, tableNameParameter, includePrimaryKeyIdentityParameter, includeNonPrimaryKeyIdentityParameter, includeIfNotExistsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getVechileYears(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getVechileYears", countryParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesMake(string country, string year)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesMake", countryParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getVehiclesYear(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getVehiclesYear", countryParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesModel(string country, string year, string make)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesModel", countryParameter, yearParameter, makeParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesEngine(string country, string year, string make, string model)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesEngine", countryParameter, yearParameter, makeParameter, modelParameter);
        }
    
        public virtual ObjectResult<usp_getVehiclesdata_Result> usp_getVehiclesdata(string country, string year, string make, string model, string engine)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var engineParameter = engine != null ?
                new ObjectParameter("Engine", engine) :
                new ObjectParameter("Engine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getVehiclesdata_Result>("usp_getVehiclesdata", countryParameter, yearParameter, makeParameter, modelParameter, engineParameter);
        }
    }
}
