//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketShare
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KapowDBEntities : DbContext
    {
        public KapowDBEntities()
            : base("name=KapowDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<usp_getVehiclesdata_Result> usp_getVehiclesdata(string country, string dBName, string year, string make, string model, string engine)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var engineParameter = engine != null ?
                new ObjectParameter("Engine", engine) :
                new ObjectParameter("Engine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getVehiclesdata_Result>("usp_getVehiclesdata", countryParameter, dBNameParameter, yearParameter, makeParameter, modelParameter, engineParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesEngine(string country, string dBName, string year, string make, string model)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesEngine", countryParameter, dBNameParameter, yearParameter, makeParameter, modelParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesMake(string country, string dBName, string year)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesMake", countryParameter, dBNameParameter, yearParameter);
        }
    
        public virtual ObjectResult<string> usp_getVehiclesModel(string country, string dBName, string year, string make)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getVehiclesModel", countryParameter, dBNameParameter, yearParameter, makeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getVehiclesYear(string country, string dBName)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getVehiclesYear", countryParameter, dBNameParameter);
        }
    
        public virtual ObjectResult<string> usp_getBrands(string country, string dBName)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getBrands", countryParameter, dBNameParameter);
        }
    
        public virtual ObjectResult<usp_getBrandsdata_Result> usp_getBrandsdata(string country, string dBName, string brand)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getBrandsdata_Result>("usp_getBrandsdata", countryParameter, dBNameParameter, brandParameter);
        }
    
        public virtual ObjectResult<string> usp_getAAIABrand(string country, string dBName, string category, string subCategory, string partTerminology)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var partTerminologyParameter = partTerminology != null ?
                new ObjectParameter("PartTerminology", partTerminology) :
                new ObjectParameter("PartTerminology", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getAAIABrand", countryParameter, dBNameParameter, categoryParameter, subCategoryParameter, partTerminologyParameter);
        }
    
        public virtual ObjectResult<usp_getBrandData_Result> usp_getBrandData(string country, string category, string subCategory, string partTerminology, string aAIABrand)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var partTerminologyParameter = partTerminology != null ?
                new ObjectParameter("PartTerminology", partTerminology) :
                new ObjectParameter("PartTerminology", typeof(string));
    
            var aAIABrandParameter = aAIABrand != null ?
                new ObjectParameter("AAIABrand", aAIABrand) :
                new ObjectParameter("AAIABrand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getBrandData_Result>("usp_getBrandData", countryParameter, categoryParameter, subCategoryParameter, partTerminologyParameter, aAIABrandParameter);
        }
    
        public virtual ObjectResult<string> usp_getCategory(string country, string dBName)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getCategory", countryParameter, dBNameParameter);
        }
    
        public virtual ObjectResult<string> usp_getPartTerminology(string country, string dBName, string category, string subCategory)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getPartTerminology", countryParameter, dBNameParameter, categoryParameter, subCategoryParameter);
        }
    
        public virtual ObjectResult<string> usp_getSubCategory(string country, string dBName, string category)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getSubCategory", countryParameter, dBNameParameter, categoryParameter);
        }
    
        public virtual ObjectResult<usp_getCategorydata_Result> usp_getCategorydata(string country, string dBName, string category, string subCategory, string partTerminology, string aAIABrand)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var subCategoryParameter = subCategory != null ?
                new ObjectParameter("SubCategory", subCategory) :
                new ObjectParameter("SubCategory", typeof(string));
    
            var partTerminologyParameter = partTerminology != null ?
                new ObjectParameter("PartTerminology", partTerminology) :
                new ObjectParameter("PartTerminology", typeof(string));
    
            var aAIABrandParameter = aAIABrand != null ?
                new ObjectParameter("AAIABrand", aAIABrand) :
                new ObjectParameter("AAIABrand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getCategorydata_Result>("usp_getCategorydata", countryParameter, dBNameParameter, categoryParameter, subCategoryParameter, partTerminologyParameter, aAIABrandParameter);
        }
    
        public virtual ObjectResult<usp_getPartNumbersdata_Result> usp_getPartNumbersdata(string country, string dBName, string partNumber, string searchScope)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));

            var searchScopeParameter = searchScope != null ?
                new ObjectParameter("SearchScope", searchScope) :
                new ObjectParameter("SearchScope", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPartNumbersdata_Result>("usp_getPartNumbersdata", countryParameter, dBNameParameter, partNumberParameter, searchScopeParameter);
        }
    }
}
